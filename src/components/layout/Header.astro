---
import Container from "../ui/Container.astro";
import Button from "../ui/Button.astro";
import { Picture } from "astro:assets";
// import logoMobile from "../../assets/img/logo/logo-mobile.png";
import logoMobile from "../../assets/img/logo/logo-mobile-alt.png";
import logoDesktop from "../../assets/img/logo/logo-desktop.png";

// Titulos mobile
const { mobileTitle = "" } = Astro.props;

// Menú de navegación
const nav = [
  { href: "/", label: "Inicio" },
  { href: "/servicios", label: "Servicios" },
  { href: "/nosotros", label: "Nosotros" },
  { href: "/blog", label: "Blog" },
  { href: "/contacto", label: "Contacto" },
];
const isActive = (path: string) => Astro.url.pathname === path;
---

<header
  class="md:sticky top-0 z-50 h-[64px] md:h-[90px] bg-white/95 backdrop-blur-sm shadow-md"
>
  <Container>
    <!-- Contenedor para centrar el título en mobile -->
    <div class="relative flex h-full w-full items-center justify-between">
      <!-- IZQUIERDA: Logo (mejor proporción mobile, 319x77 en desktop) -->
      <div class="flex-shrink-0 w-auto pl-4 pt-2 md:pt-0">
        <a href="/" class="block">
          <!-- Logo mobile: mejoramos proporción y tamaño -->
          <Picture
            src={logoMobile}
            alt="MG Consulting - Consultoría Estratégica"
            class="block md:hidden w-[72px] h-[48px] object-contain"
            width={72}
            height={48}
            loading="eager"
            format={["avif", "webp", "png"]}
            quality={100}
          />
          <!-- Logo desktop: 319x87 -->
          <Picture
            src={logoDesktop}
            alt="MG Consulting - Consultoría Estratégica para el Crecimiento Empresarial"
            class="hidden md:block w-[319px] h-[87px] object-cover"
            width={319}
            height={87}
            loading="eager"
            format={["avif", "webp", "png"]}
            quality={100}
          />
        </a>
      </div>

      <!-- CENTRO: Nav en desktop (364x22 aprox) / Título en mobile -->
      <!-- Título mobile centrado pero con más espacio para logo más grande -->
      {
        mobileTitle && (
          <div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 md:hidden text-base leading-none font-semibold text-[var(--color-blue)] truncate max-w-[45%] text-center">
            {mobileTitle}
          </div>
        )
      }

      <nav class="hidden md:flex flex-1 justify-center items-center gap-8">
        {
          nav.map((item) => (
            <a
              href={item.href}
              class={`text-slate-700 hover:text-[var(--color-brand-blue)] transition ${
                isActive(item.href)
                  ? "text-[var(--color-brand-blue)] font-semibold"
                  : ""
              }`}
            >
              {item.label}
            </a>
          ))
        }
      </nav>

      <!-- DERECHA: CTA en desktop (213x40 aprox) / Hamburguesa en mobile (40x40) -->
      <div class="hidden md:block flex-shrink-0 w-[213px] px-4">
        <Button href="/contacto" label="Contacto" />
      </div>

      <!-- Botón hamburguesa -->
      <button
        type="button"
        id="mobile-menu-button"
        class="md:hidden inline-flex items-center justify-center w-10 h-10 transition-colors hover:bg-gray-100 rounded-lg mr-2"
        aria-label="Abrir menú"
        aria-expanded="false"
      >
        <!-- Ícono hamburguesa -->
        <svg
          id="hamburger-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="w-6 h-6 text-[var(--color-brand-blue)] transition-transform duration-200"
        >
          <path
            fill-rule="evenodd"
            d="M3.75 6.75A.75.75 0 014.5 6h15a.75.75 0 010 1.5h-15a.75.75 0 01-.75-.75zm0 5.25a.75.75 0 01.75-.75h15a.75.75 0 010 1.5h-15a.75.75 0 01-.75-.75zm0 5.25a.75.75 0 01.75-.75h15a.75.75 0 010 1.5h-15a.75.75 0 01-.75-.75z"
            clip-rule="evenodd"></path>
        </svg>
        <!-- Ícono X (cerrar) -->
        <svg
          id="close-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="w-6 h-6 text-[var(--color-brand-blue)] absolute opacity-0 transition-all duration-200"
        >
          <path
            fill-rule="evenodd"
            d="M5.47 5.47a.75.75 0 011.06 0L12 10.94l5.47-5.47a.75.75 0 111.06 1.06L13.06 12l5.47 5.47a.75.75 0 11-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 01-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 010-1.06z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </Container>
  
  <!-- Menú móvil desplegable -->
  <nav
    id="mobile-menu"
    class="md:hidden bg-white shadow-lg transform -translate-y-full opacity-0 transition-all duration-300 ease-in-out absolute top-full left-0 right-0 z-40 pointer-events-none"
    hidden
  >
    <div class="px-6 py-4 space-y-3">
      {
        nav.map((item) => {
          if (isActive(item.href)) {
            return null;
          }
          return (
            <a
              href={item.href}
              class="block px-4 py-3 text-lg font-medium rounded-lg transition-colors text-slate-700 hover:bg-gray-100 hover:text-[var(--color-brand-blue)]"
            >
              {item.label}
            </a>
          );
        })
      }
    </div>
  </nav>
</header>

<script is:inline>
  // Función para manejar el menú móvil - ejecutable en cada página
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
    const closeIcon = document.getElementById('close-icon');
    
    // Verificar que todos los elementos existan
    if (!mobileMenuButton || !mobileMenu || !hamburgerIcon || !closeIcon) {
      return;
    }
    
    // Limpiar eventos anteriores si existen
    if (mobileMenuButton._mobileMenuInitialized) {
      return;
    }
    mobileMenuButton._mobileMenuInitialized = true;
    
    let isMenuOpen = false;
    
    // Función para abrir el menú
    function openMenu() {
      isMenuOpen = true;
      mobileMenu.hidden = false;
      mobileMenu.classList.remove('-translate-y-full', 'opacity-0', 'pointer-events-none');
      mobileMenu.classList.add('translate-y-0', 'opacity-100', 'pointer-events-auto');
      
      // Cambiar iconos
      hamburgerIcon.classList.add('opacity-0', 'rotate-90');
      closeIcon.classList.remove('opacity-0');
      closeIcon.classList.add('opacity-100');
      
      mobileMenuButton.setAttribute('aria-expanded', 'true');
      mobileMenuButton.setAttribute('aria-label', 'Cerrar menú');
    }
    
    // Función para cerrar el menú
    function closeMenu() {
      isMenuOpen = false;
      mobileMenu.classList.add('-translate-y-full', 'opacity-0', 'pointer-events-none');
      mobileMenu.classList.remove('translate-y-0', 'opacity-100', 'pointer-events-auto');
      
      // Esperar a que termine la animación antes de ocultar completamente
      setTimeout(() => {
        if (!isMenuOpen) {
          mobileMenu.hidden = true;
        }
      }, 300);
      
      // Cambiar iconos
      hamburgerIcon.classList.remove('opacity-0', 'rotate-90');
      closeIcon.classList.add('opacity-0');
      closeIcon.classList.remove('opacity-100');
      
      mobileMenuButton.setAttribute('aria-expanded', 'false');
      mobileMenuButton.setAttribute('aria-label', 'Abrir menú');
    }
    
    // Event listener para el botón
    mobileMenuButton.addEventListener('click', function(event) {
      event.preventDefault();
      event.stopPropagation();
      
      if (isMenuOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });
    
    // Cerrar el menú cuando se hace clic en un enlace
    const mobileMenuLinks = mobileMenu.querySelectorAll('a');
    mobileMenuLinks.forEach(link => {
      link.addEventListener('click', closeMenu);
    });
    
    // Cerrar el menú cuando se hace clic fuera de él
    document.addEventListener('click', function(event) {
      if (isMenuOpen && 
          !mobileMenu.contains(event.target) && 
          !mobileMenuButton.contains(event.target) &&
          !event.target.closest('#mobile-menu-button')) {
        closeMenu();
      }
    });
    
    // Cerrar el menú con la tecla Escape
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });
    
    // Cerrar el menú cuando se cambie a desktop
    window.addEventListener('resize', function() {
      if (window.innerWidth >= 768 && isMenuOpen) {
        closeMenu();
      }
    });
  }
  
  // Inicializar en carga de página
  document.addEventListener('DOMContentLoaded', initMobileMenu);
</script>
